@page "/Home"
@* @rendermode RenderMode.InteractiveServer *@

@inject IConfiguration Configuration
@inject HttpClient _httpClient;
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigationManager

@using web_frontend.Components.Layout.Alerts.ErrorAlert
@using web_frontend.Components.Layout.Alerts.SuccessAlert
@using web_frontend.Components.Layout.Tables.UsersTable
@using web_frontend.Entities
@using web_frontend.Models

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json
@using System.Text

<ErrorAlert ErrorMessages="@errorMessages"/>
<SuccessAlert SuccessMessages="@successMessages"/>

@if(isSignedIn)
{
    if(@userRole == "Admin")
    {
        <UsersTable/>
    } else if (@userRole == "Customer")
    {

        if(@isSubscribed == true)
        {
            @if(isCheckedIn) 
            {
                <input type="button" value="Check-out" @onclick="CheckOut">
            } else {
                <input type="button" value="Check-in" @onclick="CheckIn">
            }
        } else {
            <h1>You are not subscribed. Please contact admin</h1>
        }
    }
    else {
    }
} else {
    <h1>You are not authenticated. Please go and visit <NavLink href="/Signin">signin</NavLink></h1>
}

<input type="button" value="LOGOUT" @onclick="Signout"/>


@code {
    public List<string> errorMessages = new List<string>();
    public List<string> successMessages = new List<string>();
    private Guid? userId;
    private string? userEmail;
    private string? userRole;
    private bool isCheckedIn = false;
    private bool isSignedIn = false;
    private bool isSubscribed = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckIfCheckedIn();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try {
                userId = (await _localStorage.GetAsync<Guid>("userId")).Value;
                userRole = (await _localStorage.GetAsync<string>("userRole")).Value;
                userEmail = (await _localStorage.GetAsync<string>("userEmail")).Value;
                isSignedIn = Boolean.Parse((await _localStorage.GetAsync<string>("isSignedIn")).Value);
                isSubscribed = Boolean.Parse((await _localStorage.GetAsync<string>("isSubscribed")).Value);
            } catch(Exception ex)
            {
                isSignedIn = false;
                isSubscribed = false;
            } finally {
                StateHasChanged();
            }
        }
    }

    private async Task CheckIfCheckedIn()
    {
        HttpResponseMessage responseGymVists = await _httpClient.GetAsync($"/api/gymvisit");

        var jsonResponseGymVisits = await responseGymVists.Content.ReadFromJsonAsync<GymVistsResponseBody>();
        GymVisitEntity? gymVisit = jsonResponseGymVisits.gymVisits.SingleOrDefault(gymVisit => gymVisit.UserId == userId && gymVisit.ToDate == null);

        if(gymVisit != null)
        {
            isCheckedIn = true;
        } else {
            isCheckedIn = false;
        }
    }

    private async Task Signout()
    {

        await _localStorage.SetAsync("isSignedIn", "false");

        successMessages = new List<string>() { "Succesffully signed out" };

        StateHasChanged();

        await Task.Delay(1000);

        _navigationManager.NavigateTo("/Signin");
    }

    private async Task CheckIn()
    {
        errorMessages = new List<string>();
        successMessages = new List<string>();

        try
        {
            using StringContent CheckinJSONContent = new (JsonSerializer.Serialize(new
            {
                UserId = userId,
            }), Encoding.UTF8, "application/json");

            HttpResponseMessage responseCheckin = await _httpClient.PostAsync($"/api/gymvisit/checkin", CheckinJSONContent);

            var jsonResponseCheckin = await responseCheckin.Content.ReadFromJsonAsync<CheckInResponseBody>();

            if((int)responseCheckin.StatusCode == 200) {
                successMessages = jsonResponseCheckin!.successMessages;

                await CheckIfCheckedIn();
            } else if ((int)responseCheckin.StatusCode == 400)
            {
                errorMessages = jsonResponseCheckin!.errorMessages;
            } else if((int)responseCheckin.StatusCode == 500)
            {
                errorMessages = new List<string>() { "Error in the back-end server" };
            }
        } catch(Exception ex)
        {
            errorMessages = new List<string>() { "Error in the front-end server" };
        } finally {
            StateHasChanged();
        }
    }

    private async Task CheckOut()
    {
        errorMessages = new List<string>();
        successMessages = new List<string>();

        try
        {
            HttpResponseMessage responseGymVists = await _httpClient.GetAsync($"/api/gymvisit");

            var jsonResponseGymVisits = await responseGymVists.Content.ReadFromJsonAsync<GymVistsResponseBody>();
            using StringContent CheckoutJSONContent = new (JsonSerializer.Serialize(new
            {
                GymVisitId = jsonResponseGymVisits.gymVisits.Single(gymVisit => gymVisit.UserId == userId && gymVisit.ToDate == null).GymVisitId,
            }), Encoding.UTF8, "application/json");

            HttpResponseMessage responseCheckout = await _httpClient.PatchAsync($"/api/gymvisit/checkout", CheckoutJSONContent);

            var jsonResponseCheckout = await responseCheckout.Content.ReadFromJsonAsync<CheckOutResponseBody>();

            if((int)responseCheckout.StatusCode == 200) {
                successMessages = jsonResponseCheckout!.successMessages;

                await CheckIfCheckedIn();
            } else if ((int)responseCheckout.StatusCode == 400)
            {
                errorMessages = jsonResponseCheckout!.errorMessages;
            } else if((int)responseCheckout.StatusCode == 500)
            {
                errorMessages = new List<string>() { "Error in the back-end server" };
            }
        } catch(Exception ex)
        {
            errorMessages = new List<string>() { "Error in the front-end server" };
        } finally {
            StateHasChanged();
        }
    }

    private class GymVistsResponseBody
    {
        public List<GymVisitEntity>? gymVisits { get; set; }
    }

    private class CheckInResponseBody
    {
        public List<string>? errorMessages { get; set; }
        public List<string>? successMessages { get; set; }
    }

    private class CheckOutResponseBody
    {
        public List<string>? errorMessages { get; set; }
        public List<string>? successMessages { get; set; }
    }
}